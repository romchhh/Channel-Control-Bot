import telebot
from keyboards.user_keyboard import get_join_request_keyboard
from config import bot_token, admins, enter_channel, channel1
import db
from keyboards.admin_keyboard import admin
from telebot import types
import io
import openpyxl
import io

bot = telebot.TeleBot(bot_token)

@bot.chat_join_request_handler()
def handle_join_request(message):
    user_id = message.from_user.id
    first_name  = message.from_user.first_name
    user_data = {
        'username': message.from_user.username,
        'first_name': message.from_user.first_name,
        'last_name': message.from_user.last_name
    }

    db.init_db()
    db.save_user_data(user_id, user_data)

    keyboard = get_join_request_keyboard()
    bot.send_message(user_id, f"<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {first_name}!</b> –ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π ,\n –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. \n<i>–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É!</i>", parse_mode='HTML', reply_markup=keyboard)

import re

@bot.callback_query_handler(func=lambda call: call.data == "check_subscriptions")
def check_subscriptions(call):
    user_id = call.from_user.id
    chat_name = '@vchempower'

    try:
        chat = bot.get_chat(chat_name)
        member = bot.get_chat_member(chat.id, user_id)

        if member.status in ["member", "creator", "administrator"]:
            bot.answer_callback_query(call.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")
            bot.approve_chat_join_request(enter_channel, user_id)
        else:
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        print(f"Error checking subscription for chat {chat_name}: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    if user_id in admins:
        bot.send_message(user_id, "üë®üèº‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=admin())



@bot.message_handler(func=lambda message: message.text == 'üóÇ –í–∏–≥—Ä—É–∑–∏—Ç—å –ë–î' and message.from_user.id in admins)
def get_DB(message):
    user_data = db.get_all_user_data()

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "UserData"

    headers = ['id', 'username', 'first_name', 'last_name']
    ws.append(headers)

    for row in user_data:
        ws.append([row['id'], row['username'], row['first_name'], row['last_name']])

    output = io.BytesIO()
    wb.save(output)
    output.seek(0)

    bot.send_document(chat_id=message.chat.id, document=output, filename='UserData.xlsx')



    
    
@bot.message_handler(func=lambda message: message.text == 'üì© –†–∞—Å—Å—ã–ª–∫–∞' and message.from_user.id in admins)
def send_broadcast_prompt(message):

    bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É *HTML*, —Ç–æ –µ—Å—Ç—å:\n'
                                      '<b>*–ñ–∏—Ä–Ω—ã–π*</b>\n'
                                      '<i>_–ö—É—Ä—Å–∏–≤_</i>\n'
                                      '<pre>`–ú–æ–Ω–æ—à–∏—Ä–Ω—ã–π`</pre>\n'
                                      '<a href="—Å—Å—ã–ª–∫–∞-–Ω–∞-—Å–∞–π—Ç">[–û–±–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å—Å—ã–ª–∫—É](test.ru)</a>'.format(),
                             parse_mode="markdown")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    bot.register_next_step_handler(message, process_broadcast_text)
def process_broadcast_text(message):
    bot.process_broadcast_text = message.text
    
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    bot.register_next_step_handler(message, process_broadcast_photo)

def process_broadcast_photo(message):
    if message.text == '/skip':
        send_preview(message.chat.id)
    elif message.photo:
        bot.process_broadcast_photo = message.photo[0].file_id
        send_preview(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")

def send_preview(chat_id):
    markup = types.InlineKeyboardMarkup()
    preview_button = types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_broadcast")
    cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    markup.row(preview_button, cancel_button)
    markup.one_time_keyboard = True
    
    text = "üì£ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
    text += bot.process_broadcast_text 
    
    if hasattr(bot, "process_broadcast_photo"):
        bot.send_photo(chat_id, bot.process_broadcast_photo, caption=text, parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "send_broadcast")
def send_broadcast_to_users_callback(call):
    text = bot.process_broadcast_text
    photo = bot.process_broadcast_photo if hasattr(bot, "process_broadcast_photo") else None
    send_broadcast_to_users(text, photo, call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_broadcast")
def cancel_broadcast_callback(call):
    bot.send_message(call.message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    del bot.process_broadcast_text
    if hasattr(bot, "process_broadcast_photo"):
        del bot.process_broadcast_photo
    admin(call.message) 

def send_broadcast_to_users(text, photo, chat_id):
    try:
        user_ids = db.get_all_user_ids() 
        for user_id in user_ids:
            try:
                if photo:
                    bot.send_photo(user_id, photo, caption=text, parse_mode='HTML')
                else:
                    bot.send_message(user_id, text, parse_mode='HTML')
            except Exception as e:
                print(f"Error sending message to user with ID {user_id}: {str(e)}")
        
        bot.send_message(chat_id, f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        
        
@bot.message_handler(func=lambda message: message.text == 'üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and message.from_user.id in admins)
def send_user_statistics(message):
    try:
        total_users = db.get_total_users()
        text = "üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:* {0}\n".format(total_users)

        bot.send_message(message.chat.id, text, parse_mode='Markdown')

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            
if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print (e)
            

